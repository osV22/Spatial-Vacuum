#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.60.6)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["coin", "handlePart", "headPart", "Cube"]
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "handlePart" (
        active = true
    )
    {
        reorder nameChildren = ["offset", "connector"]
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "offset" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707963, 0, 0)
            }
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (1, 13, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token axis = "Y"
                double height = 0.1
                rel material:binding = </Root/handlePart/offset/Cylinder/DefaultMaterial>
                double radius = 0.05
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.05, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:mtlx:surface.connect = </Root/handlePart/offset/Cylinder/DefaultMaterial/PreviewSurface.outputs:out>
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/handlePart/offset/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                    def Shader "DefaultSurfaceShader" (
                        active = true
                    )
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (0.9080254, 0.94196725, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        float inputs:opacityThreshold = 1
                        float inputs:roughness = 0.2
                        token outputs:surface
                    }

                    def Shader "PreviewSurface" (
                        active = false
                    )
                    {
                        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                        token outputs:out
                        float2 ui:nodegraph:node:pos = (-255, 105)
                        float2 ui:nodegraph:node:size = (148.5, 199)
                    }
                }
            }
        }

        def Xform "connector" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, -1.3393232)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.1, 0.100000076, 1.3)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 3.7252903e-8, -0.65)
                }
            }
        }
    }

    def Xform "headPart" (
        active = true
    )
    {
        def Cube "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/headPart/Cube/DefaultMaterial>
            double size = 0.2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (2.5, 0.3, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                prepend token outputs:surface.connect = </Root/headPart/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.49839708, 0.6478897, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:opacityThreshold = 1
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.5, 0.15, 0.3)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }
    }
}

